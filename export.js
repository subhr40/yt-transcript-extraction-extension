/**
 * Export.js: Handle PDF and Markdown exports
 */

class ExportManager {
    constructor() {
        this.jsPDFLoaded = false;
        this.loadJsPDF();
    }

    async loadJsPDF() {
        if(this.jsPDFLoaded) return;

        try {
            // Load PDF from CDN
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
            script.onload = () => {
                this.jsPDFLoaded = true;
                console.log(`PDF loaded successfully`);
            };
            document.head.appendChild(script);
        } catch(error){
            console.error(`Failed to load PDF ${error}`);
        }
    }

    async exportToPDF(summaryData) {
        if(!this.jsPDFLoaded || !window.jsPDF) {
            throw new Error("PDF export library not loaded");
        }
        try {
            const { jsPDF } = window.jsPDF;
            const doc = new jsPDF();

            // Set up styling
            const margin = 20;
            const pageWidth = doc.internal.pageSize.getWidth();
            const contentWidth = pageWidth - (margin * 2);

            let currentY = margin;

            // Header
            doc.setFontSize(20);
            doc.setFont(undefined, 'bold');
            doc.text('YouTube Video Summary', margin, currentY);
            currentY += 15;

            // Video Info
            doc.setFontSize(12);
            doc.setFont(undefined, 'normal');

            if(summaryData.title) {
                doc.setFont(undefined, 'bold');
                doc.text('Title:', margin, currentY);
                doc.setFont(undefined, 'normal');
                const titleLines = doc.splitTextToSize(summaryData.title, contentWidth - 30);
                doc.text(titleLines, margin + 30, currentY);
                currentY += (titleLines.length * 5) + 5;
            }

            if(summaryData.channel) {
                doc.setFont(undefined, 'bold');
                doc.text('Channel:', margin, currentY);
                doc.setFont(undefined, 'normal');
                doc.text(summaryData.channel, margin + 35, currentY);
                currentY += 10;
            }

            if(summaryData.duration) {
                doc.setFont(undefined, 'bold');
                doc.text('Duration: ', margin, currentY);
                doc.setFont(undefined, 'normal');
                doc.text(summaryData.duration, margin + 35, currentY);
                currentY += 10;
            }

            if (summaryData.url) {
                doc.setFont(undefined, 'bold');
                doc.text('URL:', margin, currentY);
                doc.setFont(undefined, 'normal');
                const urlLines = doc.splitTextToSize(summaryData.url, contentWidth - 25);
                doc.text(urlLines, margin + 25, currentY);
                currentY += (urlLines.length * 5) + 10;
            }

            // Summary Type
            doc.setFont(undefined, 'bold');
            doc.setFontSize(14);
            doc.text('Summary', margin, currentY);
            currentY += 10;

            doc.setFont(undefined, 'normal');
            doc.setFontSize(11);

            const summaryLines = doc.splitTextToSizes(summaryData.content, contentWidth);

            summaryLines.forEach(line => {
                if(currentY > doc.internal.pageSize.getHeight() - margin) {
                    doc.addPage();
                    currentY = margin;
                }
                doc.text(line, margin, currentY);
                currentY += 5;
            });

            // Footer
            const pageCount = doc.internal.getNumberOfPages();
            for(let i = 1;i <= pageCount; i++) {
                doc.setPage(i);
                doc.setFontSize(8);
                doc.setFont(undefined, 'normal');
                doc.text(
                    `Generated by YT Summarizer - ${new Date().toLocaleDateString()} - Page ${i}/${pageCount}`,
                    margin,
                    doc.internal.pageSize.getHeight() - 10
                );
            }

            // Save PDF
            const fileName = this.generatedFileName(summaryData.title, 'pdf');
            doc.save(filename);

            return { success: true, fileName };

        } catch(error) {
            console.error(`PDF Export Error: ${error}`);
            throw error;
        }
    }

    
}